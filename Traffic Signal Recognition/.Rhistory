if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install(version = "3.12")
a
source("http://bioconductor.org/biocLite.R")
biocLite("EBImage")
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install(version = "3.12")
source("http://bioconductor.org/biocLite.R")
BiocManager::install()
source("http://bioconductor.org/biocLite.R")
BiocManager::valid()
biocLite("EBImage")
source("https://bioconductor.org/biocLite.R")
plot(image)
for (file in files) {
image <- read.pnm(paste(path, file, sep=""), cellres=1)
plot(image)
}
mtext(title, side = 3, line = -23, outer = TRUE)
library('pixmap')
image <- read.pnm('GTSRB/Final_Training/Images/00000/00000_00002.ppm',cellres=1)
red_matrix <- matrix(image@red, nrow = image@size[1], ncol = image@size[2])
green_matrix <- matrix(image@green, nrow = image@size[1], ncol = image@size[2])
blue_matrix <- matrix(image@blue, nrow = image@size[1], ncol = image@size[2])
plot(image, main=sprintf("Original"))
rotate <- function(x) t(apply(x, 2, rev))
par(mfrow=c(1, 3))
image(rotate(red_matrix), col = grey.colors(255), main=sprintf("Red"))
image(rotate(green_matrix), col = grey.colors(255), main=sprintf("Green"))
image(rotate(blue_matrix), col = grey.colors(255), main=sprintf("Blue"))
plot_samples <- function(training_path, class, num_sample){
classes <- c("Speed limit (20km/h)", "Speed limit (30km/h)",
"Speed limit (50km/h)", "Speed limit (60km/h)",
"Speed limit (70km/h)", "Speed limit (80km/h)",
"End of speed limit (80km/h)", "Speed limit (100km/h)",
"Speed limit (120km/h)",  "No passing",  "No passing for vehicles over 3.5 metric tons",
"Right-of-way at the next intersection",  "Priority road", "Yield", "Stop", "No vehicles",
"Vehicles over 3.5 metric tons prohibited", "No entry", "General caution", "Dangerous curve to
the left", "Dangerous curve to the right", "Double curve", " Bumpy road", "Slippery road",
"Road narrows on the right", "Road work", "Traffic signals", "Pedestrians", "Children
crossing", "Bicycles crossing",
"Beware of ice/snow", "Wild animals crossing",
"End of all speed and passing limits",
"Turn right ahead", "Turn left ahead", "Ahead only",
"Go straight or right", "Go straight or left",
"Keep right", "Keep left", "Roundabout mandatory",
"End of no passing", "End of no passing by vehicles over 3.5 metric
tons")
if (class<10) {
path <- paste(training_path, "0000", class, "/", sep="")
} else {
path <- paste(training_path, "000", class, "/", sep="")
}
par(mfrow=c(1, num_sample))
# Randomly display num_sample samples
all_files <- list.files(path = path)
title <- paste('Class', class, ':', classes[class+1])
print(paste(title, "          (", length(all_files),
" samples)", sep=""))
files <- sample(all_files, num_sample)
for (file in files) {
image <- read.pnm(paste(path, file, sep=""), cellres=1)
plot(image)
}
mtext(title, side = 3, line = -23, outer = TRUE)
}
training_path <- "GTSRB/Final_Training/Images/"
plot_samples(training_path, 12, 3)
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install(version = "3.12")
source("http://bioconductor.org/biocLite.R")
if (!requireNamespace("BiocManager", quietly = TRUE))
+   install.packages("BiocManager")
> BiocManager::install(version = "3.12")
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install(version = "3.12")
source("http://bioconductor.org/biocLite.R")
BiocManager::install()
library(BiocManager)
BiocManager::install(version = "devel")
BiocManager::install(update = TRUE, ask = FALSE)
biocLite("EBImage")
BiocManager::install(c(
"biocLite"), update = TRUE, ask = FALSE)
BiocManager::remove
detach("package:BiocManager", unload = TRUE)
library(BiocManager)
remove.packages("BiocManager")
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install(version = "3.12")
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install()
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("affycoretools")
source("http://bioconductor.org/biocLite.R")
BiocManager::valid()
BiocManager::install(c(
"GenomicFeatures", "AnnotationDbi"
), update = TRUE, ask = FALSE)
source("http://bioconductor.org/biocLite.R")
biocLite("EBImage")
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install()
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install()
install.packages("BiocManager")
library('pixmap')
image <- read.pnm('GTSRB/Final_Training/Images/00000/00000_00002.ppm',cellres=1)
red_matrix <- matrix(image@red, nrow = image@size[1], ncol = image@size[2])
green_matrix <- matrix(image@green, nrow = image@size[1], ncol = image@size[2])
blue_matrix <- matrix(image@blue, nrow = image@size[1], ncol = image@size[2])
plot(image, main=sprintf("Original"))
rotate <- function(x) t(apply(x, 2, rev))
par(mfrow=c(1, 3))
image(rotate(red_matrix), col = grey.colors(255), main=sprintf("Red"))
image(rotate(green_matrix), col = grey.colors(255), main=sprintf("Green"))
image(rotate(blue_matrix), col = grey.colors(255), main=sprintf("Blue"))
plot_samples <- function(training_path, class, num_sample){
classes <- c("Speed limit (20km/h)", "Speed limit (30km/h)",
"Speed limit (50km/h)", "Speed limit (60km/h)",
"Speed limit (70km/h)", "Speed limit (80km/h)",
"End of speed limit (80km/h)", "Speed limit (100km/h)",
"Speed limit (120km/h)",  "No passing",  "No passing for vehicles over 3.5 metric tons",
"Right-of-way at the next intersection",  "Priority road", "Yield", "Stop", "No vehicles",
"Vehicles over 3.5 metric tons prohibited", "No entry", "General caution", "Dangerous curve to
the left", "Dangerous curve to the right", "Double curve", " Bumpy road", "Slippery road",
"Road narrows on the right", "Road work", "Traffic signals", "Pedestrians", "Children
crossing", "Bicycles crossing",
"Beware of ice/snow", "Wild animals crossing",
"End of all speed and passing limits",
"Turn right ahead", "Turn left ahead", "Ahead only",
"Go straight or right", "Go straight or left",
"Keep right", "Keep left", "Roundabout mandatory",
"End of no passing", "End of no passing by vehicles over 3.5 metric
tons")
if (class<10) {
path <- paste(training_path, "0000", class, "/", sep="")
} else {
path <- paste(training_path, "000", class, "/", sep="")
}
par(mfrow=c(1, num_sample))
# Randomly display num_sample samples
all_files <- list.files(path = path)
title <- paste('Class', class, ':', classes[class+1])
print(paste(title, "          (", length(all_files),
" samples)", sep=""))
files <- sample(all_files, num_sample)
for (file in files) {
image <- read.pnm(paste(path, file, sep=""), cellres=1)
plot(image)
}
mtext(title, side = 3, line = -23, outer = TRUE)
}
training_path <- "GTSRB/Final_Training/Images/"
plot_samples(training_path, 12, 3)
BiocManager::valid()
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install()
source("http://bioconductor.org/biocLite.R")
biocLite("EBImage")
library("EBImage")
roi_resize <- function(input_matrix, roi){
roi_matrix <- input_matrix[roi[1, 'Roi.Y1']:roi[1, 'Roi.Y2'],
roi[1, 'Roi.X1']:roi[1, 'Roi.X2']]
return(resize(roi_matrix(32, 32)))
}
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
pkgs <- rownames(installed.packages())
BiocManager::install(pkgs, type = "source", checkBuilt = TRUE)
library(BiocManager)
library(BiocVersion)
detach("package:BiocVersion", unload = TRUE)
library(BiocVersion)
library(BiocManager)
biocLite("EBImage")
source("http://bioconductor.org/biocLite.R")
BiocManager::repositories()
BiocManager::install()
biocLite("EBImage")
source("http://bioconductor.org/biocLite.R")
BiocManager::install( )
biocLite("EBImage")
BiocManager::install()
BiocManager::valid()
biocLite("EBImage")
BiocManager::install("EBImage")
library(EBImage)
library("EBImage")
roi_resize <- function(input_matrix, roi){
roi_matrix <- input_matrix[roi[1, 'Roi.Y1']:roi[1, 'Roi.Y2'],
roi[1, 'Roi.X1']:roi[1, 'Roi.X2']]
return(resize(roi_matrix(32, 32)))
}
annotation <- read.csv(file="GTSRB/Final_Training/Images/00000/GT-00000.csv", header=TRUE, sep=";")
roi = annotation[3, ]
red_matrix_cropped <- roi_resize(red_matrix, roi)
return(resize(roi_matrix,32, 32))
library("EBImage")
roi_resize <- function(input_matrix, roi){
roi_matrix <- input_matrix[roi[1, 'Roi.Y1']:roi[1, 'Roi.Y2'],
roi[1, 'Roi.X1']:roi[1, 'Roi.X2']]
return(resize(roi_matrix,32, 32))
}
annotation <- read.csv(file="GTSRB/Final_Training/Images/00000/GT-00000.csv", header=TRUE, sep=";")
roi = annotation[3, ]
red_matrix_cropped <- roi_resize(red_matrix, roi)
par(mfrow=c(1, 2))
image(rotate(red_matrix), col = grey.colors(255) , main=sprintf("Original"))
image(rotate(red_matrix_cropped), col = grey.colors(255) , main=sprintf("Preprocessed"))
load_labeled_data <- function(training_path, classes){
# Initialize the pixel features X and target y
X <- matrix(, nrow = 0, ncol = 32*32)
y <- vector()
# Load images from each of the 43 classes
for(i in classes) {
print(paste('Loading images from class', i))
if (i<10) {
annotation_path <- paste(training_path, "0000", i, "/GT-0000",
i, ".csv", sep="")
path <- paste(training_path, "0000", i, "/", sep="")
} else {
annotation_path <- paste(training_path, "000", i, "/GT-000", i, ".csv", sep="")
path <- paste(training_path, "000", i, "/", sep="")
}
annotation <- read.csv(file=annotation_path, header=TRUE,
sep=";")
for (row in 1:nrow(annotation)) {
# Read each image
image_path <- paste(path, annotation[row, "Filename"], sep="")
image <- read.pnm(image_path, cellres=1)
# Parse RGB color space
red_matrix <- matrix(image@red, nrow = image@size[1], ncol = image@size[2])
green_matrix <- matrix(image@green, nrow = image@size[1], ncol = image@size[2])
blue_matrix <- matrix(image@blue, nrow = image@size[1], ncol = image@size[2])
# Crop ROI and resize
red_matrix_cropped <- roi_resize(red_matrix, annotation[row, ])
green_matrix_cropped <- roi_resize(green_matrix, annotation[row, ])
blue_matrix_cropped <- roi_resize(blue_matrix, annotation[row, ])
# Convert to brightness, e.g. Y' channel
x <- 0.299 * red_matrix_cropped + 0.587 * green_matrix_cropped + 0.114 * blue_matrix_cropped
X <- rbind(X, matrix(x, 1, 32*32))
y <- c(y, i)
}
}
return(list("x" = X, "y" = y))
}
classes <- 0:42
data <- load_labeled_data(training_path, classes)
# Save the data object to a file
saveRDS(data, file = "43 classes.rds")
# Restore the data object
data <- readRDS(file = "43 classes.rds")
data.x <- data$x
data.y <- data$y
dim(data.x)
summary(as.factor(data.y))
central_block <- c(222:225, 254:257, 286:289, 318:321)
par(mfrow=c(2, 2))
for(i in c(1, 14, 20, 27)) {
hist(c(as.matrix(data.x[data.y==i, central_block])),  main=sprintf("Histogram for class %d", i), xlab="Pixel brightness")
}
(red_matrix, annotation[row, ])
green_matrix_cropped <- roi_resize(green_matrix, annotation[row, ])
blue_matrix_cropped <- roi_resize(blue_matrix, annotation[row, ])
# Convert to brightness, e.g. Y' channel
x <- 0.299 * red_matrix_cropped + 0.587 * green_matrix_cropped + 0.114 * blue_matrix_cropped
X <- rbind(X, matrix(x, 1, 32*32))
y <- c(y, i)
}
}
central_block <- c(222:225, 254:257, 286:289, 318:321)
par(mfrow=c(2, 2))
central_block <- c(222:225, 254:257, 286:289, 318:321)
par(mfrow=c(2, 2))
for(i in c(1, 14, 20, 27, 32)) {
hist(c(as.matrix(data.x[data.y==i, central_block])),  main=sprintf("Histogram for class %d", i), xlab="Pixel brightness")
}
library('pixmap')
image <- read.pnm('GTSRB/Final_Training/Images/00000/00000_00002.ppm',cellres=1)
red_matrix <- matrix(image@red, nrow = image@size[1], ncol = image@size[2])
green_matrix <- matrix(image@green, nrow = image@size[1], ncol = image@size[2])
blue_matrix <- matrix(image@blue, nrow = image@size[1], ncol = image@size[2])
plot(image, main=sprintf("Original"))
rotate <- function(x) t(apply(x, 2, rev))
par(mfrow=c(1, 3))
image(rotate(red_matrix), col = grey.colors(255), main=sprintf("Red"))
image(rotate(green_matrix), col = grey.colors(255), main=sprintf("Green"))
image(rotate(blue_matrix), col = grey.colors(255), main=sprintf("Blue"))
plot_samples <- function(training_path, class, num_sample){
classes <- c("Speed limit (20km/h)", "Speed limit (30km/h)",
"Speed limit (50km/h)", "Speed limit (60km/h)",
"Speed limit (70km/h)", "Speed limit (80km/h)",
"End of speed limit (80km/h)", "Speed limit (100km/h)",
"Speed limit (120km/h)",  "No passing",  "No passing for vehicles over 3.5 metric tons",
"Right-of-way at the next intersection",  "Priority road", "Yield", "Stop", "No vehicles",
"Vehicles over 3.5 metric tons prohibited", "No entry", "General caution", "Dangerous curve to
the left", "Dangerous curve to the right", "Double curve", " Bumpy road", "Slippery road",
"Road narrows on the right", "Road work", "Traffic signals", "Pedestrians", "Children
crossing", "Bicycles crossing",
"Beware of ice/snow", "Wild animals crossing",
"End of all speed and passing limits",
"Turn right ahead", "Turn left ahead", "Ahead only",
"Go straight or right", "Go straight or left",
"Keep right", "Keep left", "Roundabout mandatory",
"End of no passing", "End of no passing by vehicles over 3.5 metric
tons")
if (class<10) {
path <- paste(training_path, "0000", class, "/", sep="")
} else {
path <- paste(training_path, "000", class, "/", sep="")
}
par(mfrow=c(1, num_sample))
# Randomly display num_sample samples
all_files <- list.files(path = path)
title <- paste('Class', class, ':', classes[class+1])
print(paste(title, "          (", length(all_files),
" samples)", sep=""))
files <- sample(all_files, num_sample)
for (file in files) {
image <- read.pnm(paste(path, file, sep=""), cellres=1)
plot(image)
}
mtext(title, side = 3, line = -23, outer = TRUE)
}
training_path <- "GTSRB/Final_Training/Images/"
plot_samples(training_path, 12, 3)
BiocManager::install()
library("EBImage")
roi_resize <- function(input_matrix, roi){
roi_matrix <- input_matrix[roi[1, 'Roi.Y1']:roi[1, 'Roi.Y2'],
roi[1, 'Roi.X1']:roi[1, 'Roi.X2']]
return(resize(roi_matrix,32, 32))
}
annotation <- read.csv(file="GTSRB/Final_Training/Images/00000/GT-00000.csv", header=TRUE, sep=";")
roi = annotation[3, ]
red_matrix_cropped <- roi_resize(red_matrix, roi)
par(mfrow=c(1, 2))
image(rotate(red_matrix), col = grey.colors(255) , main=sprintf("Original"))
image(rotate(red_matrix_cropped), col = grey.colors(255) , main=sprintf("Preprocessed"))
load_labeled_data <- function(training_path, classes){
# Initialize the pixel features X and target y
X <- matrix(, nrow = 0, ncol = 32*32)
y <- vector()
# Load images from each of the 43 classes
for(i in classes) {
print(paste('Loading images from class', i))
if (i<10) {
annotation_path <- paste(training_path, "0000", i, "/GT-0000",
i, ".csv", sep="")
path <- paste(training_path, "0000", i, "/", sep="")
} else {
annotation_path <- paste(training_path, "000", i, "/GT-000", i, ".csv", sep="")
path <- paste(training_path, "000", i, "/", sep="")
}
annotation <- read.csv(file=annotation_path, header=TRUE,
sep=";")
for (row in 1:nrow(annotation)) {
# Read each image
image_path <- paste(path, annotation[row, "Filename"], sep="")
image <- read.pnm(image_path, cellres=1)
# Parse RGB color space
red_matrix <- matrix(image@red, nrow = image@size[1], ncol = image@size[2])
green_matrix <- matrix(image@green, nrow = image@size[1], ncol = image@size[2])
blue_matrix <- matrix(image@blue, nrow = image@size[1], ncol = image@size[2])
# Crop ROI and resize
red_matrix_cropped <- roi_resize(red_matrix, annotation[row, ])
green_matrix_cropped <- roi_resize(green_matrix, annotation[row, ])
blue_matrix_cropped <- roi_resize(blue_matrix, annotation[row, ])
# Convert to brightness, e.g. Y' channel
x <- 0.299 * red_matrix_cropped + 0.587 * green_matrix_cropped + 0.114 * blue_matrix_cropped
X <- rbind(X, matrix(x, 1, 32*32))
y <- c(y, i)
}
}
return(list("x" = X, "y" = y))
}
classes <- 0:42
data <- load_labeled_data(training_path, classes)
# Restore the data object
data <- readRDS(file = "43 classes.rds")
data.x <- data$x
data.y <- data$y
dim(data.x)
summary(as.factor(data.y))
central_block <- c(222:225, 254:257, 286:289, 318:321)
par(mfrow=c(2, 2))
for(i in c(1, 14, 20, 27)) {
hist(c(as.matrix(data.x[data.y==i, central_block])),  main=sprintf("Histogram for class %d", i), xlab="Pixel brightness")
}
library('pixmap')
image <- read.pnm('GTSRB/Final_Training/Images/00000/00000_00002.ppm',cellres=1)
red_matrix <- matrix(image@red, nrow = image@size[1], ncol = image@size[2])
green_matrix <- matrix(image@green, nrow = image@size[1], ncol = image@size[2])
blue_matrix <- matrix(image@blue, nrow = image@size[1], ncol = image@size[2])
plot(image, main=sprintf("Original"))
rotate <- function(x) t(apply(x, 2, rev))
par(mfrow=c(1, 3))
image(rotate(red_matrix), col = grey.colors(255), main=sprintf("Red"))
image(rotate(green_matrix), col = grey.colors(255), main=sprintf("Green"))
image(rotate(blue_matrix), col = grey.colors(255), main=sprintf("Blue"))
plot_samples <- function(training_path, class, num_sample){
classes <- c("Speed limit (20km/h)", "Speed limit (30km/h)",
"Speed limit (50km/h)", "Speed limit (60km/h)",
"Speed limit (70km/h)", "Speed limit (80km/h)",
"End of speed limit (80km/h)", "Speed limit (100km/h)",
"Speed limit (120km/h)",  "No passing",  "No passing for vehicles over 3.5 metric tons",
"Right-of-way at the next intersection",  "Priority road", "Yield", "Stop", "No vehicles",
"Vehicles over 3.5 metric tons prohibited", "No entry", "General caution", "Dangerous curve to
the left", "Dangerous curve to the right", "Double curve", " Bumpy road", "Slippery road",
"Road narrows on the right", "Road work", "Traffic signals", "Pedestrians", "Children
crossing", "Bicycles crossing",
"Beware of ice/snow", "Wild animals crossing",
"End of all speed and passing limits",
"Turn right ahead", "Turn left ahead", "Ahead only",
"Go straight or right", "Go straight or left",
"Keep right", "Keep left", "Roundabout mandatory",
"End of no passing", "End of no passing by vehicles over 3.5 metric
tons")
if (class<10) {
path <- paste(training_path, "0000", class, "/", sep="")
} else {
path <- paste(training_path, "000", class, "/", sep="")
}
par(mfrow=c(1, num_sample))
# Randomly display num_sample samples
all_files <- list.files(path = path)
title <- paste('Class', class, ':', classes[class+1])
print(paste(title, "          (", length(all_files),
" samples)", sep=""))
files <- sample(all_files, num_sample)
for (file in files) {
image <- read.pnm(paste(path, file, sep=""), cellres=1)
plot(image)
}
mtext(title, side = 3, line = -23, outer = TRUE)
}
training_path <- "GTSRB/Final_Training/Images/"
plot_samples(training_path, 12, 3)
BiocManager::install()
library("EBImage")
roi_resize <- function(input_matrix, roi){
roi_matrix <- input_matrix[roi[1, 'Roi.Y1']:roi[1, 'Roi.Y2'],
roi[1, 'Roi.X1']:roi[1, 'Roi.X2']]
return(resize(roi_matrix,32, 32))
}
annotation <- read.csv(file="GTSRB/Final_Training/Images/00000/GT-00000.csv", header=TRUE, sep=";")
roi = annotation[3, ]
red_matrix_cropped <- roi_resize(red_matrix, roi)
par(mfrow=c(1, 2))
image(rotate(red_matrix), col = grey.colors(255) , main=sprintf("Original"))
image(rotate(red_matrix_cropped), col = grey.colors(255) , main=sprintf("Preprocessed"))
load_labeled_data <- function(training_path, classes){
# Initialize the pixel features X and target y
X <- matrix(, nrow = 0, ncol = 32*32)
y <- vector()
# Load images from each of the 43 classes
for(i in classes) {
print(paste('Loading images from class', i))
if (i<10) {
annotation_path <- paste(training_path, "0000", i, "/GT-0000",
i, ".csv", sep="")
path <- paste(training_path, "0000", i, "/", sep="")
} else {
annotation_path <- paste(training_path, "000", i, "/GT-000", i, ".csv", sep="")
path <- paste(training_path, "000", i, "/", sep="")
}
annotation <- read.csv(file=annotation_path, header=TRUE,
sep=";")
for (row in 1:nrow(annotation)) {
# Read each image
image_path <- paste(path, annotation[row, "Filename"], sep="")
image <- read.pnm(image_path, cellres=1)
# Parse RGB color space
red_matrix <- matrix(image@red, nrow = image@size[1], ncol = image@size[2])
green_matrix <- matrix(image@green, nrow = image@size[1], ncol = image@size[2])
blue_matrix <- matrix(image@blue, nrow = image@size[1], ncol = image@size[2])
# Crop ROI and resize
red_matrix_cropped <- roi_resize(red_matrix, annotation[row, ])
green_matrix_cropped <- roi_resize(green_matrix, annotation[row, ])
blue_matrix_cropped <- roi_resize(blue_matrix, annotation[row, ])
# Convert to brightness, e.g. Y' channel
x <- 0.299 * red_matrix_cropped + 0.587 * green_matrix_cropped + 0.114 * blue_matrix_cropped
X <- rbind(X, matrix(x, 1, 32*32))
y <- c(y, i)
}
}
return(list("x" = X, "y" = y))
}
# Save the data object to a file
#saveRDS(data, file = "43 classes.rds")
# Restore the data object
data <- readRDS(file = "43 classes.rds")
data.x <- data$x
data.y <- data$y
dim(data.x)
summary(as.factor(data.y))
central_block <- c(222:225, 254:257, 286:289, 318:321)
par(mfrow=c(2, 2))
for(i in c(1, 14, 20, 27)) {
hist(c(as.matrix(data.x[data.y==i, central_block])),  main=sprintf("Histogram for class %d", i), xlab="Pixel brightness")
}
